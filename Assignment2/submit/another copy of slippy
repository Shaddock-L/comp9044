#!/usr/bin/env python3
from curses.ascii import isdigit
import re
import sys

#pre process the arguments
temp = sys.argv[1:]
f_opt = False # read commands from file 
n_opt = False #stops input lines being printed by default.
commands = []
cmd = []
cmd_raw = ""
commands_filename = ""
whole_cmd = ""
filenames = []
for i in range(len(temp)):
    if temp[i] == '-f':
        f_opt = True
        commands_filename = temp[i+1]
        i += 1
        continue
    elif temp[i] == '-n':
        n_opt = True
        continue
    else:
        if commands_filename != temp[i]:
            commands.append(temp[i])
if f_opt:
    #print("fopt is on")
    with open(commands_filename, 'r') as f:
        for line in f:
            cmd_raw = line.strip().split(';')
            whole_cmd += line
            
            for k in cmd_raw:
                k = re.sub(' *', '', k)
                k = re.sub('#.*', '',k)
                if k == "":
                    continue
                cmd.append(k)
    
                   
                
    for ele in commands:
            filenames.append(ele)
else:
    cmd_raw = commands[0]
    whole_cmd = cmd_raw
    whole_cmd = whole_cmd.strip()
    cmd_raw = re.sub(r'\n', ';', cmd_raw)
    cmd = cmd_raw.split(';')
    commands.pop(0)
    if len(commands) > 0:
        for ele in commands:
            filenames.append(ele)



# useful variables : 
# 1.cmd : a list of multiple commands 
# 2. filenames: if len(f) > 0, read from spec files
# 3. -n option only print spec lines

quit_cmd = [] # mutiple quit commands, quit if meet any one of them

for c in cmd:
    ele = c
    # rm space and #.*
    ele = re.sub(' *', '', ele)
    if ';' not in ele:
        ele = re.sub('#.*', '', ele)
    else:
        ele = re.sub('#.*;', ';', ele)
        ele = re.sub('#.*', '', ele)
    if ele[-1] == 'q':
        quit_cmd.append(ele)


# global var for print/delete/substitude
keep_print = {}
keep_delete = {}
keep_sub = {}
# global var for testing whether current line is last line
last_line_flag = False

# read next line in advance to check whether next line is the last line
def read_next():
    try:
        next = input()
        return next
    except EOFError as e:
        return ""


# bool type
def quit(comm, cur_cnt, text):
    global last_line_flag
    for c in comm:
        temp = c.split(',')
        if len(temp) > 1:
            print('slippy: command line: invalid command')
            sys.exit(1)
        if c == '$q':
            if last_line_flag:
                return True
        elif c == 'q':
            return True
        elif '/' in c:
            # regex
            pat = re.sub(r'q$','', c)
            pat = re.sub(r'\/', '', pat)
            if re.search(rf'{pat}', text):
                return True          
        else:
                # number
            num = int(c[:-1])
            if num == cur_cnt:
                return True
    return False



def print_fun(comm, cur_cnt, text, nth_prt):
    global keep_print
    global last_line_flag
    com = comm[:-1].split(',')
    if len(com) == 1:
        # 1 address
        if '/' in comm:
            # regex
            pat = re.sub(r'p$','', comm)
            pat = re.sub(r'\/', '', pat)
            if re.search(rf'{pat}', text):
                #print(text)   
                return True      
        else:
            # number or 'p' or $
            if comm == '$p':
                if last_line_flag:
                    #print(text)
                    return True
                    
            elif comm == 'p': #command is 'p'
                #print(text)
                return True
            else:
                num = int(comm[:-1])
                if num == cur_cnt:
                    #print(text)
                    return True
    else:
        # address is a range
        # address 2(digit case) is before address 1(digit/regex)
        if com[0] == '$':
            if last_line_flag:
                #print(text)
                return True
        elif com[1].isdigit() and int(com[1]) < cur_cnt:
            if com[0].isdigit() and int(com[0]) > int(com[1]):
                if cur_cnt == int(com[0]):
                    #print(text)
                    return True
            elif not com[0].isdigit():
                pat = re.sub(r'\/', '', com[0])
                if re.search(rf'{pat}', text):
                    #print(text)
                    return True
        
        elif keep_print[nth_prt]:
            
            if com[1].isdigit():
                # take nth line as address
                num = int(com[1])
                if cur_cnt == num:
                    keep_print[nth_prt] = False
            elif com[1] == '$':
                pass
            else:
                # take a regex as address
                pat = re.sub(r'\/', '', com[1])
                if re.search(rf'{pat}', text):
                    keep_print[nth_prt] = False
            
                #print(text)
            return True

        else:
            # not match yet
            if com[0].isdigit():
                num = int(com[0])
                if cur_cnt == num:
                    keep_print[nth_prt] = True
                    if text:
                        #print(text)
                        return True
            else:
                pat = re.sub(r'\/', '', com[0])
                if re.search(rf'{pat}', text):
                    keep_print[nth_prt] = True
                    if text:
                        #print(text)
                        return True
    return False

def delete(comm, cur_cnt, text, j):
    if comm == 'd':
        return True
    global last_line_flag

    global keep_delete
    com = comm[:-1].split(',')
    if len(com) == 1:
        # 1 address
        if comm == '$d':
            if last_line_flag:
                return True
        elif '/' in comm:
            # regex
            pat = re.sub(r'd$','', comm)
            pat = re.sub(r'\/', '', pat)
            if re.search(rf'{pat}', text):
                return True
        else:
            # number
            num = int(comm[:-1])
            if num == cur_cnt:
                return True
    else:
        # address is a range
        # address 2(digit case) is before address 1(digit/regex)
        if com[0] == '$':
            if last_line_flag:
                return True
        elif com[1].isdigit() and int(com[1]) < cur_cnt:
            if com[0].isdigit() and int(com[0]) > int(com[1]):
                if cur_cnt == int(com[0]):
                    return True
            elif not com[0].isdigit():
                pat = re.sub(r'\/', '', com[0])
                if re.search(rf'{pat}', text):
                    return True



        elif keep_delete[j]:
            if com[1].isdigit():
                #take nth line as address
                num = int(com[1])
                if cur_cnt == num:
                    keep_delete[j] = False
                    return True
            else:
                # take a regex as address
                pat = re.sub(r'\/', '', com[1])
                if re.search(rf'{pat}', text):
                    keep_delete[j] = False
                    return True
            return True
        else:
            # not match yet
            if com[0].isdigit():
                num = int(com[0])
                if cur_cnt == num:
                    keep_delete[j] = True
                    return True
            else:
                # take regex as address
                pat = re.sub(r'\/', '', com[0])
                if re.search(rf'{pat}', text):
                    keep_delete[j] = True
                    return True
    return False

def subs(comm, cur_cnt, text, j):
    global last_line_flag
    global keep_sub
    temp = text
    c = comm.split('s')
    address = c[0]
    deli_char = c[1][0]
    
    pats = c[1].split(deli_char)
    com = address.split(',')
    
    if len(com) == 1:
        # 1 address
        if com[0] == '$':
            if last_line_flag:
                if pats[-1] != 'g':
                    temp = re.sub(pats[1], pats[2], temp, count=1)
                else:
                    temp = re.sub(pats[1], pats[2], temp)

        elif com[0] == "":
            if pats[-1] != 'g':
                temp = re.sub(pats[1], pats[2], temp, count=1)
            else:
                temp = re.sub(pats[1], pats[2], temp)
        elif com[0].isdigit():
            # address is nth line
            num = int(com[0])
            if num == cur_cnt:
                if pats[-1] != 'g':
                    temp = re.sub(pats[1], pats[2], temp, count=1)
                else:
                    temp = re.sub(pats[1], pats[2], temp)
        else:
            # address is regex
            pat = re.sub(r'\/', '', com[0])
            if re.search(rf'{pat}', text):
                if pats[-1] != 'g':
                    temp = re.sub(pats[1], pats[2], temp, count=1)
                else:
                    temp = re.sub(pats[1], pats[2], temp)
    else:
        # address is a range
        if com[0] == '$':
            if last_line_flag:
                if pats[-1] != 'g':
                    temp = re.sub(pats[1], pats[2], temp, count=1)
                else:
                    temp = re.sub(pats[1], pats[2], temp)
        elif com[1].isdigit() and int(com[1]) < cur_cnt:
            if com[0].isdigit() and int(com[0]) > int(com[1]):
                if cur_cnt == int(com[0]):
                    if pats[-1] != 'g':
                        temp = re.sub(pats[1], pats[2], temp, count=1)
                    else:
                        temp = re.sub(pats[1], pats[2], temp)
            elif not com[0].isdigit():
                pat = re.sub(r'\/', '', com[0])
                if re.search(rf'{pat}', text):
                    if pats[-1] != 'g':
                        temp = re.sub(pats[1], pats[2], temp, count=1)
                    else:
                        temp = re.sub(pats[1], pats[2], temp)
        
        elif keep_sub[j]:
            if com[1].isdigit():
                # take nth line as address
                num = int(com[1])
                if cur_cnt == num:
                    keep_sub[j] = False
                if pats[-1] != 'g':
                    temp = re.sub(pats[1], pats[2], temp, count=1)
                else:
                    temp = re.sub(pats[1], pats[2], temp)
            else:
                # take a regex as address
                pat = re.sub(r'\/', '', com[1])
                if re.search(rf'{pat}', text):
                    keep_sub[j] = False
                if pats[-1] != 'g':
                    temp = re.sub(pats[1], pats[2], temp, count=1)
                else:
                    temp = re.sub(pats[1], pats[2], temp)
        else:
            # not match yet
            if com[0].isdigit():
                # take nth line as address
                num = int(com[0])
                if cur_cnt == num:
                    keep_sub[j] = True
                    if pats[-1] != 'g':
                        temp = re.sub(pats[1], pats[2], temp, count=1)
                    else:
                        temp = re.sub(pats[1], pats[2], temp)
            else:
                # take a regex as address
                pat = re.sub(r'\/', '', com[0])
                if re.search(rf'{pat}', text):
                    keep_sub[j] = True
                    if pats[-1] != 'g':
                        temp = re.sub(pats[1], pats[2], temp, count=1)
                    else:
                        temp = re.sub(pats[1], pats[2], temp)
    return temp

quit_flag = False
count = 1
if len(filenames) > 0:  # read from spec files
    size = len(filenames)
    total_length = 0
    for i in range(size):
        fn = filenames[i]
        # quit or not
        if quit_flag:
            break
        #reset flags
        keep_print = {}
        #keep_delete = {}
        keep_sub = {}
        delete_flag = False
        with open(fn, 'r') as f:
            file = f.readlines()
            total_length += len(file)
            print_or_not = False
            for line in file:
                # rm \n in the end
                content = line.strip()
                # check the last line
                if total_length == count:
                    if i == size - 1:
                        last_line_flag = True
                # append command
                if re.search('[0-9]*a ', whole_cmd) or re.search('/.*/a ', whole_cmd):
                    if content == "":
                        break
                    print(content)
                    apd_cmd = whole_cmd.split('a ')
                    apd_address = apd_cmd[0]
                    apd_cont = apd_cmd[1]
                    if apd_address == "":
                        print(apd_cont)
                    elif apd_address == "$":
                        if last_line_flag:
                            print(apd_cont)
                    elif apd_address.isdigit():
                        if int(apd_address) == count:
                            print(apd_cont)
                    else:
                        apd_address = re.sub('/', '', apd_address)
                        if re.search(apd_address, content):
                            print(apd_cont)
                    count += 1
                    continue


                # insert command
                if re.search('[0-9]*i ', whole_cmd) or re.search('/.*/i ', whole_cmd):
                    if content == "":
                        break
                    insert_cmd = whole_cmd.split('i ')
                    insert_address = insert_cmd[0]
                    insert_cont = insert_cmd[1]
                    if insert_address == "":
                        print(insert_cont)
                    elif insert_address == "$":
                        if last_line_flag:
                            print(insert_cont)
                    elif insert_address.isdigit():
                        if int(insert_address) == count:
                            print(insert_cont)
                    else:
                        insert_address = re.sub('/', '', insert_address)
                        if re.search(insert_address, content):
                            print(insert_cont)
                    print(content)
                    count += 1
                    continue

                # change command
                if re.search('[0-9]*c ', whole_cmd) or re.search('/.*/c ', whole_cmd):
                    if content == "":
                        break
                    change_cmd = whole_cmd.split('c ')
                    change_address = change_cmd[0]
                    change_cont = change_cmd[1]
                    if change_address == "":
                        content = change_cont
                    elif change_address == "$":
                        if last_line_flag:
                            content = change_cont
                    elif change_address.isdigit():
                        if int(change_address) == count:
                            content = change_cont
                    else:
                        changeaddress = re.sub('/', '', change_address)
                        if re.search(change_address, content):
                            content = change_cont
                    print(content)
                    count += 1
                    continue

                delete_flag = False
                for j in range(len(cmd)):
                    ele = cmd[j]
                    # rm space and #.*
                    ele = re.sub(' *', '', ele)
                    if ';' not in ele:
                        ele = re.sub('#.*', '', ele)
                    else:
                        ele = re.sub('#.*;', ';', ele)
                        ele = re.sub('#.*', '', ele)
                    if ele == "":
                        continue
    
                    if ele[-1] == 'q':
                        if quit(quit_cmd, count, content):
                            print(content)
                            quit_flag = True
                            break
                    elif ele[-1] == 'p':
                        if j not in keep_print:
                            keep_print[j] = False
                        print_switch = print_fun(ele, count, content, j)
                        if print_switch:
                            print_or_not = True
                    elif ele[-1] == 'd':
                        if j not in keep_delete:
                            keep_delete[j] = False

                        if delete(ele, count, content, j):
                            delete_flag = True
                            break
                    else:
                        if j not in keep_sub:
                            keep_sub[j] = False
                        
                        content = subs(ele, count, content,j)
                if not n_opt:
                    if not delete_flag and not quit_flag and content!= "":
                        print(content)
                if print_or_not:
                    print_or_not = False
                    if content != "":
                        print(content)
                count += 1
    count -= 1
    

                
else:
    # read from input()
    prev = input()
    while 1:
        
        try:
            print_or_not = False
            content = prev
            orig_cont = content
            next = read_next()
            prev = next
            if next == "":
                last_line_flag = True
            delete_flag = False
            
            if quit_flag:
                break
            
            # append command
            if re.search('[0-9]*a ', whole_cmd) or re.search('/.*/a ', whole_cmd):
                if content == "":
                    break
                print(content)
                apd_cmd = whole_cmd.split('a ')
                apd_address = apd_cmd[0]
                apd_cont = apd_cmd[1]
                if apd_address == "":
                    print(apd_cont)
                elif apd_address == "$":
                    if last_line_flag:
                        print(apd_cont)
                elif apd_address.isdigit():
                    if int(apd_address) == count:
                        print(apd_cont)
                else:
                    apd_address = re.sub('/', '', apd_address)
                    if re.search(apd_address, content):
                        print(apd_cont)
                    
                count += 1
                continue


            # insert command
            if re.search('[0-9]*i ', whole_cmd) or re.search('/.*/i ', whole_cmd):
                if content == "":
                    break
                insert_cmd = whole_cmd.split('i ')
                insert_address = insert_cmd[0]
                insert_cont = insert_cmd[1]
                if insert_address == "":
                    print(insert_cont)
                elif insert_address == "$":
                    if last_line_flag:
                        print(insert_cont)
                elif insert_address.isdigit():
                    if int(insert_address) == count:
                        print(insert_cont)
                else:
                    insert_address = re.sub('/', '', insert_address)
                    if re.search(insert_address, content):
                        print(insert_cont)
                    
                print(content)
                count += 1
                continue

            # change command
            if re.search('[0-9]*c ', whole_cmd) or re.search('/.*/c ', whole_cmd):
                if content == "":
                    break
                change_cmd = whole_cmd.split('c ')
                change_address = change_cmd[0]
                change_cont = change_cmd[1]
                if change_address == "":
                    content = change_cont
                elif change_address == "$":
                    if last_line_flag:
                        content = change_cont
                elif change_address.isdigit():
                    if int(change_address) == count:
                        content = change_cont
                else:
                    changeaddress = re.sub('/', '', change_address)
                    if re.search(change_address, content):
                        content = change_cont
                        
                print(content)
                count += 1
                continue


            #for ele in cmd:
            for j in range(len(cmd)):
                ele = cmd[j]
                ele = re.sub(' *', '', ele)
                if ';' not in ele:
                    ele = re.sub('#.*', '', ele)

                else:
                    ele = re.sub('#.*;', ';', ele)
                    ele = re.sub('#.*', '', ele)
            
                if ele == "":
                        continue
                
                if ele[-1] == 'q':
                    
                    if quit(quit_cmd, count, content):
                        quit_flag = True
                        break
                elif ele[-1] == 'p':
                    if j not in keep_print:
                        keep_print[j] = False
                    
                    print_switch = print_fun(ele, count, content, j)
                    if print_switch:
                        if not print_or_not:
                            # never print before
                            print_or_not = True
                            print(content)
                        else:
                            if content != orig_cont and content != "":
                                print(content)
                            
                elif ele[-1] == 'd':
                    if j not in keep_delete:
                        keep_delete[j] = False
                    if delete(ele, count, content, j):
                            delete_flag = True
                            break
                else:
                    # sub command
                    if j not in keep_sub:
                        keep_sub[j] = False
                    content = subs(ele, count, content,j)
            if not n_opt:
                if not delete_flag:
                    print(content)
            count += 1
            if last_line_flag:
                break
              
        except EOFError as e:
            break
